name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/sample-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/sample-backend

jobs:
  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        component: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/sample-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/${{ matrix.component }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Update GitOps manifests
  update-gitops:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update image tags in GitOps manifests
        run: |
          # Get the short SHA for tagging
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)

          # Update the sample-app.yaml with new image tags
          sed -i "s|tag: \"latest\"|tag: \"main-${SHORT_SHA}\"|g" gitops/apps/sample-app.yaml

          # Update Helm values if needed
          if [ -f apps/helm/sample-app/values.yaml ]; then
            sed -i "s|tag: \"latest\"|tag: \"main-${SHORT_SHA}\"|g" apps/helm/sample-app/values.yaml
          fi

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update image tags to main-$(echo ${{ github.sha }} | cut -c1-7)"
            git push
          fi

  # Lint and validate
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd apps/frontend
          npm ci

      - name: Lint frontend
        run: |
          cd apps/frontend
          npm run lint

      - name: Install backend dependencies
        run: |
          cd apps/backend
          npm ci

      - name: Lint backend
        run: |
          cd apps/backend
          npm run lint

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format Check
        run: |
          cd infra/terraform
          terraform fmt -check

      - name: Validate Kubernetes manifests
        uses: instrumenta/kubeval-action@master
        with:
          files: gitops/apps/,gitops/bootstrap/

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
