{{- if .Values.database.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sample-app.fullname" . }}-postgres
  labels:
    {{- include "sample-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: 1  # PostgreSQL should only have 1 replica
  strategy:
    type: Recreate  # Ensure only one instance at a time
  selector:
    matchLabels:
      {{- include "sample-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
      labels:
        {{- include "sample-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "sample-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Values.database.name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
          imagePullPolicy: {{ .Values.database.image.pullPolicy }}
          ports:
            - name: postgres
              containerPort: {{ .Values.database.service.targetPort }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.database.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.database.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.database.resources | nindent 12 }}
          env:
            {{- toYaml .Values.database.env | nindent 12 }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init
              mountPath: /docker-entrypoint-initdb.d
            - name: tmp
              mountPath: /tmp
            - name: run
              mountPath: /var/run/postgresql
      volumes:
        - name: postgres-data
          {{- if .Values.database.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "sample-app.fullname" . }}-postgres-data
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: postgres-init
          configMap:
            name: {{ include "sample-app.fullname" . }}-postgres-init
            defaultMode: 0755
        - name: tmp
          emptyDir: {}
        - name: run
          emptyDir: {}
      {{- with .Values.database.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.database.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}