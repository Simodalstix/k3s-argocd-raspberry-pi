# Default values for sample-app
# This is a YAML-formatted file.

global:
  imageRegistry: "ghcr.io"
  imagePullSecrets: []
  storageClass: "usb-storage"

# Application metadata
app:
  name: sample-app
  version: "1.0.0"

# Frontend configuration
frontend:
  enabled: true
  name: frontend
  replicaCount: 1

  image:
    repository: ghcr.io/YOUR_USERNAME/sample-frontend
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    name: http

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Backend configuration
backend:
  enabled: true
  name: backend
  replicaCount: 1

  image:
    repository: ghcr.io/YOUR_USERNAME/sample-backend
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
    name: http

  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3001"
    - name: DATABASE_HOST
      value: "mariadb-service"
    - name: DATABASE_PORT
      value: "3306"
    - name: DATABASE_NAME
      value: "appdb"
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: mariadb-secret
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mariadb-secret
          key: password
    - name: LOG_LEVEL
      value: "info"
    - name: METRICS_ENABLED
      value: "true"

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  livenessProbe:
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: 3001
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Service Monitor for Prometheus
  serviceMonitor:
    enabled: true
    path: /metrics
    interval: 30s

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Database configuration
database:
  enabled: true
  name: mariadb

  image:
    repository: mariadb
    tag: "10.11"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3306
    targetPort: 3306
    name: mariadb

  persistence:
    enabled: true
    storageClass: "usb-storage"
    size: 2Gi
    accessMode: ReadWriteOnce

  env:
    - name: MYSQL_DATABASE
      value: "appdb"
    - name: MYSQL_USER
      valueFrom:
        secretKeyRef:
          name: mariadb-secret
          key: username
    - name: MYSQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mariadb-secret
          key: password
    - name: MYSQL_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          name: mariadb-secret
          key: root-password

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  livenessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    exec:
      command:
        - /bin/bash
        - -c
        - mysql -h localhost -u $MYSQL_USER -p$MYSQL_PASSWORD -e "SELECT 1"
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Secrets
secrets:
  mariadb:
    username: "appuser"
    password: "apppass123" # Change in production
    root-password: "rootpass123" # Change in production

# ConfigMaps
configMaps:
  app:
    DATABASE_HOST: "mariadb-service"
    DATABASE_PORT: "3306"
    DATABASE_NAME: "appdb"
    LOG_LEVEL: "info"
    METRICS_ENABLED: "true"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: pi.local # Change to your domain
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend-service
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: backend-service
            port: 3001
  tls:
    - secretName: sample-app-tls
      hosts:
        - pi.local # Change to your domain

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 3001
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3001 # For metrics scraping
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 3306 # MariaDB
        - protocol: TCP
          port: 53 # DNS
        - protocol: UDP
          port: 53 # DNS

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

# Pod Security Context
podSecurityContext:
  fsGroup: 1001
