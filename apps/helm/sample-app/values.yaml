# Default values for sample-app
# This is a YAML-formatted file.

global:
  imageRegistry: "ghcr.io"
  imagePullSecrets: []
  storageClass: "usb-storage"

# Application metadata
app:
  name: sample-app
  version: "1.0.0"

# Frontend configuration
frontend:
  enabled: true
  name: frontend
  replicaCount: 1

  image:
    repository: ghcr.io/YOUR_USERNAME/sample-frontend
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 80
    targetPort: 8080
    name: http

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Backend configuration
backend:
  enabled: true
  name: backend
  replicaCount: 1

  image:
    repository: ghcr.io/YOUR_USERNAME/sample-backend
    tag: "latest"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 3001
    targetPort: 3001
    name: http

  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3001"
    - name: DATABASE_HOST
      value: "postgres-service"
    - name: DATABASE_PORT
      value: "5432"
    - name: DATABASE_NAME
      value: "appdb"
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: postgres-secret
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-secret
          key: password
    - name: LOG_LEVEL
      value: "info"
    - name: METRICS_ENABLED
      value: "true"

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  livenessProbe:
    httpGet:
      path: /health
      port: 3001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readinessProbe:
    httpGet:
      path: /ready
      port: 3001
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

  # Service Monitor for Prometheus
  serviceMonitor:
    enabled: true
    path: /metrics
    interval: 30s

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Database configuration
database:
  enabled: true
  name: postgres

  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
    name: postgres

  persistence:
    enabled: true
    storageClass: "usb-storage"
    size: 2Gi
    accessMode: ReadWriteOnce

  env:
    - name: POSTGRES_DB
      value: "appdb"
    - name: POSTGRES_USER
      valueFrom:
        secretKeyRef:
          name: postgres-secret
          key: username
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: postgres-secret
          key: password
    - name: PGDATA
      value: "/var/lib/postgresql/data/pgdata"

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  livenessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6

  readinessProbe:
    exec:
      command:
        - /bin/sh
        - -c
        - -e
        - |
          exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 6

  nodeSelector: {}
  tolerations: []
  affinity: {}

# Secrets
secrets:
  postgres:
    username: "postgres"
    password: "postgres123" # Change in production

# ConfigMaps
configMaps:
  app:
    DATABASE_HOST: "postgres-service"
    DATABASE_PORT: "5432"
    DATABASE_NAME: "appdb"
    LOG_LEVEL: "info"
    METRICS_ENABLED: "true"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: pi.local # Change to your domain
      paths:
        - path: /
          pathType: Prefix
          service:
            name: frontend-service
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: backend-service
            port: 3001
  tls:
    - secretName: sample-app-tls
      hosts:
        - pi.local # Change to your domain

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 3001
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 3001 # For metrics scraping
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432 # PostgreSQL
        - protocol: TCP
          port: 53 # DNS
        - protocol: UDP
          port: 53 # DNS

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Horizontal Pod Autoscaler
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  fsGroup: 1001

# Pod Security Context
podSecurityContext:
  fsGroup: 1001
